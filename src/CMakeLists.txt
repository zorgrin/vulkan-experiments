cmake_minimum_required(VERSION 3.1)

SET(REQUIRED_GCC_VERSION 5.4)
SET(REQUIRED_CLANG_VERSION 3.6)

#TODO FindVulkan
#get_filename_component(VULKAN_ROOT ~/bin/khronos ABSOLUTE)
#SET(VULKAN_INCLUDE_DIR ${VULKAN_ROOT}/include)
#SET(VULKAN_LIBRARY_DIR ${VULKAN_ROOT}/lib)
#SET(GLSLANG_VALIDATOR ${VULKAN_ROOT}/bin/glslangValidator)

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE CXX_COMPILER_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
    IF(NOT (CXX_COMPILER_VERSION VERSION_GREATER ${REQUIRED_GCC_VERSION} OR CXX_COMPILER_VERSION VERSION_EQUAL ${REQUIRED_GCC_VERSION}))
        message(FATAL_ERROR "Project requires g++ ${REQUIRED_GCC_VERSION} or greater.")
    ENDIF()
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE CXX_COMPILER_VERSION)
    string(REGEX REPLACE ".*clang version ([0-9]+\\.[0-9]+).*" "\\1" CXX_COMPILER_VERSION ${CXX_COMPILER_VERSION})
    IF(NOT (CXX_COMPILER_VERSION VERSION_GREATER ${REQUIRED_CLANG_VERSION} OR CXX_COMPILER_VERSION VERSION_EQUAL ${REQUIRED_CLANG_VERSION}))
        message(FATAL_ERROR "Project requires clang++ ${REQUIRED_CLANG_VERSION} or greater.")
    ENDIF()
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
#TODO check version
ELSE()
    message(FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
ENDIF()
message(STATUS "Using ${CMAKE_CXX_COMPILER_ID} compiler version ${CXX_COMPILER_VERSION}")

SET(CMAKE_BUILD_TYPE Debug)

IF("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    SET(VULKAN_LIBRARIES -lvulkan)
    SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} /opt/qt5/lib/cmake ~/bin/qt5/lib/cmake) #FIXME remove home 
    SET(PROJECT_BINARY_OUTPUT_DIR ${CMAKE_SOURCE_DIR}/../bin)
    SET(OUTPUT_DIR_SUFFIX)
ELSEIF("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    SET(VULKAN_LIBRARIES vulkan-1)
    SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} $ENV{QT_DIR}/lib/cmake)
    SET(PROJECT_BINARY_OUTPUT_DIR ${CMAKE_SOURCE_DIR}/../bin/)
    SET(OUTPUT_DIR_SUFFIX ${CMAKE_BUILD_TYPE})
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/Modules)

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z -Wall -Woverloaded-virtual -Wnon-virtual-dtor -Wextra -Wconversion")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type -Werror=delete-incomplete -Werror=inconsistent-missing-override")
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=unused-parameter")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP8")
ENDIF()

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_OUTPUT_DIR})
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_OUTPUT_DIR})

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

INCLUDE_DIRECTORIES(${VULKAN_INCLUDE_DIR})
LINK_DIRECTORIES(${VULKAN_LIBRARY_DIR})

SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${PROJECT_BINARY_OUTPUT_DIR})

ADD_SUBDIRECTORY(wrapper)

ADD_SUBDIRECTORY(tools/shader-compiler)

ADD_SUBDIRECTORY(shaders)
ADD_DEPENDENCIES(shaders glsl-compiler)

ADD_SUBDIRECTORY(engine)
ADD_DEPENDENCIES(vulkan-engine vulkan-wrapper)

ADD_SUBDIRECTORY(sandbox)
ADD_DEPENDENCIES(vulkan-sandbox vulkan-wrapper vulkan-engine shaders)
